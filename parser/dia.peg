{
  function filterItems (first, rows) {
    var base = first ? [first] : []
    return base.concat(rows.map(function (row) {
      return row[1]
    }))
  }
  function sum (values) {
    return values.reduce(function (v, s) { return s + v }, 0)
  }
  function sumValues (items) {
    return sum(items.map(function (i) { return i.value }))
  }
}

start = _? i:block? b:(newline+ block)* newline* { return filterItems(i, b) }
block
  = _? n:name colon newline c:compras a:additions? t:total? newline? {
      a = a ? a : [];
      var realTotal = sumValues(c) + sumValues(a);     
      if (t && t > realTotal) {
        a.push({value: (t - realTotal), desc: 'diferença'})
      } else { t = realTotal  }
      
      return {
        kind: 'compra',
        fornecedor: n,
        items: c,
        extras: a,
        total: t
      } 
    }
  / _? v:venda { v.kind = 'venda'; return v; }
  / _? c:conta { c.kind = 'conta'; return c; }
  / _? s:saida { s.kind = 'saída'; return s; }
  / _? e:entrada { e.kind = 'entrada'; return e; }
  / _? s:saldo { s.kind = 'saldo'; return s; }
  / _? a:any+ { return {kind: 'comment', note: a.join('')} }
  
conta
  = 'pag'i 'amento'i? name? sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'conta'i name? sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'boleto'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'fatura'i name? sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  
saida
  = 'sa'i [ií]i 'da'i _ 'para'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'sa'i [ií]i 'da'i _ 'p/'i sep? e:(name? value_sep?)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'sa'i [ií]i 'da'i (_ name)? sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'retirada'i _ 'para'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'retirada'i _ 'p/'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'retirada'i (_ name)? sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }

entrada
  = 'entrou'i _ 'do'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'entrou'i _ 'de'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'entrou'i (_ name)? sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'entraram'i (_? sep?) p:preco e:(_ name)? { return {value: p, desc: e ? e[1] : ''} }
  / 'entrada'i _ 'do'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'entrada'i _ 'de'i sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }
  / 'entrada'i _ 'de'i _ sep? p:preco e:(_ name)? { return {value: p, desc: e ? e[0] : ''} }
  / 'entrada'i (_ name)? sep? e:(name value_sep)? p:preco { return {value: p, desc: e ? e[0] : ''} }

saldo
  = 'saldo' _ name? value_sep? p:preco { return {value: p} }
  / 'caixa' _ name? value_sep? p:preco { return {value: p} }

sep = _? ':' _? / _? '-' _? / _? '|' _? / _? ';' _?

compras = f:item r:(newline item)* { return filterItems(f, r) }
additions = newline f:addition r:(newline addition)* { return filterItems(f, r) }
addition
  = '+' _? v:preco { return {value: v} }
  / '+' _? d:name value_sep v:preco { return {value: v, desc: d} }
  / '-' _? v:preco { return {value: -v} }
  / '-' _? d:name value_sep v:preco { return {value: -v, desc: d} }
total
  = newline '=' _? v:preco { return v }
  / newline 'total' _? colon _? v:preco { return v }

venda
  = i:item _ 'no' _ p:pag { i.pagamento = p; return i }
  / i:item _ 'em' _ p:pag { i.pagamento = p; return i }
  / i:item value_sep p:pag { i.pagamento = p; return i }
  / i:item _ 'de' _ x:x { i.pagamento = 'crédito'; i.x = x; return i } 
  / i:item _ 'em' _ x:x { i.pagamento = 'crédito'; i.x = x; return i } 
  / i:item value_sep x:x { i.pagamento = 'crédito'; i.x = x; return i }
  / i:item value_sep p:pag value_sep x:x { i.x = x; i.p = p == 'cartão' ? 'crédito' : p; return i }
  / i:item value_sep x:x value_sep p:pag { i.x = x; i.p = p == 'cartão' ? 'crédito' : p; return i }
  / i:item _ 'em' _ x:x _ 'no' _ p:pag { i.x = x; i.p = p == 'cartão' ? 'crédito' : p; return i }
  / i:item _ 'de' _ x:x _ 'no' _ p:pag { i.x = x; i.p = p == 'cartão' ? 'crédito' : p; return i }
  / i:item { i.pagamento = 'dinheiro'; return i }
pag
  = 'crédito'i {return 'crédito'}
  / 'credito'i {return 'crédito'}
  / 'créd'i {return 'crédito'}
  / 'cred'i {return 'crédito'}
  / 'débito'i {return 'débito'}
  / 'debito'i {return 'débito'}
  / 'déb'i {return 'débito'}
  / 'deb'i {return 'débito'}
  / 'dinheiro'i {return 'dinheiro'}
  / 'cheque'i {return 'cheque'}
  / 'cartão'i {return 'cartão'}
  / 'cartao'i {return 'cartão'}
  / 'cart'i {return 'cartão'}
x
  = n:num _ 'vezes' { return parseInt(n) }
  / n:num _? 'x' { return parseInt(n) }

item
  = i:quant quant_sep n:name value_sep v:preco {
      var item = i
      i.item = n
      i.value = v
      return i
    }
  / v:preco value_sep i:quant quant_sep n:name {
      var item = i
      i.item = n
      i.value = v
      return i
    }
  / v:preco value_sep n:name quant_sep i:quant {
      var item = i
      i.item = n
      i.value = v
      return i
    }
  / n:name quant_sep i:quant value_sep v:preco {
      var item = i
      i.item = n
      i.value = v
      return i
  }
  / q:value n:name value_sep v:preco {
      return {
        item: n,
        u: 'u',
        q: q,
        value: v
      }
    }
  / i:quant n:name value_sep v:preco {
      var item = i
      i.item = n
      i.value = v
      return i
    }
  / v:preco value_sep i:quant n:name {
      var item = i
      i.item = n
      i.value = v
      return i
    }
  / v:preco value_sep n:name i:quant {
      var item = i
      i.item = n
      i.value = v
      return i
    }
  / n:name i:quant value_sep v:preco {
      var item = i
      i.item = n
      i.value = v
      return i
  }
  / n:name value_sep v:preco {
    return {
      item: n,
      u: 'u',
      q: 1,
      value: v
    }
  }

preco
  = reais _? v:value { return parseInt(v*100) }
  / v:value _ reais { return parseInt(v*100) }
  / v:value _ centavos { return parseInt(v) }
  / v:value { return parseInt(v*100) }

quant
  = q:value _? u:unit {
    if (u == 'g') {
      u = 'kg'
      q = q/1000
    }
    return {u: u, q: q}
  }
  
quant_sep
  = _? 'de'i _?
  / _? semicolon _?
  / _? comma _?
  
value_sep
  = _? colon _?
  / _ '--' _
  / _ '-' _
  
unit
  = 'u'i 'nidade'? 's'i? { return 'unidade' }
  / 'kg'i 's'i? { return 'kg' }
  / 'quilo'i 's'i? { return 'kg' }
  / 'kilo'i 's'i? { return 'kg' }
  / 'grama'i 's'i? { return 'g' }
  / 'g'i { return 'g' }
  / 'ml'i 's'i? { return 'ml' }
  / 'mg'i 's'i? { return 'mg' }
  / 'tanto'i 's'i? { return 'punhado' }
  / 'punhado'i { return 'punhado' }
  / 'ramo'i 's'i? { return 'ramo' }
  / 'pct'i 's'i? { return 'pacote' }
  / 'pacote'i 's'i? { return 'pacote' }
  / 'saco'i 's'i? { return 'saco' }
  / 'sc'i 's'i? { return 'saco' }
  / 'cx'i 's'i? { return 'caixa' }
  / 'caixa'i 's'i? { return 'caixa' }
  / 'litro'i 's'i? { return 'litro' }
  / 'l'i { return 'litro' }
  / 'garrafa'i 's'i? { return 'garrafa' }
  / 'penca'i 's'i? { return 'penca' }
  / 'bandeja'i 's'i? { return 'bandeja' }
  / 'vidro'i 's'i? { return 'vidro' }
  / 'vdr'i 's'i? { return 'vidro' }
  / 'vd'i 's'i? { return 'vidro' }
  / 'lata'i 's'i? { return 'lata' }
  / 'pote'i 's'i? { return 'pote' }
  / 'pt'i 's'i? { return 'pote' }
  / 'potinho'i 's'i? { return 'pote' }

reais = 'reais'i / 'real'i / 'R$'i / 'BRL'
centavos = 'centavo'i 's'i? / 'cent'i 's'i?

name
  = l1:letter+ '-' l2:letter+ '-' l3:letter+ { return (l1.join('') + '-' + l2.join('') + '-' + l3.join('')).toLowerCase() }
  / l1:letter+ '-' l2:letter+ { return (l1.join('') + '-' + l2.join('')).toLowerCase() }
  / l:letter+ { return l.join('').trim().toLowerCase() }
letter = [A-Za-z\u0080-\u00FF0-9 ]i
value = n:num+ { return parseFloat(n.join('').replace(',', '.')) }
num = [,0-9]
space = " "
_ = space+
colon = ":"
comma = ","
semicolon = ';'
newline = "\n"
any = [^\n]

